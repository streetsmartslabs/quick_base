=begin
#Quick Base API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'spec_helper'
require 'json'

# Unit tests for QuickBase::TablesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TablesApi' do
  before do
    # run before each test
    @instance = QuickBase::TablesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TablesApi' do
    it 'should create an instance of TablesApi' do
      expect(@instance).to be_instance_of(QuickBase::TablesApi)
    end
  end

  # unit tests for create_relationship
  # Create a relationship
  # Creates a relationship in a table as well as lookup/summary fields. Relationships can only be created for tables within the same app.
  # @param table_id The unique identifier (dbid) of the table. This will be the child table.
  # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
  # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
  # @option opts [Generated5] :generated 
  # @return [Hash<String, Object>]
  describe 'create_relationship test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_table
  # Create a table
  # Creates a table in an application.
  # @param app_id The unique identifier of an app
  # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
  # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
  # @option opts [Generated3] :generated 
  # @return [Hash<String, Object>]
  describe 'create_table test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_relationship
  # Delete a relationship
  # Use this endpoint to delete an entire relationship, including all lookup and summary fields. The reference field in the relationship will not be deleted.
  # @param table_id The unique identifier (dbid) of the table. This will be the child table.
  # @param relationship_id The relationship id. This is the field id of the reference field on the child table.
  # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
  # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
  # @return [Hash<String, Object>]
  describe 'delete_relationship test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_table
  # Delete a table
  # Deletes a specific table in an application, including all of the data within it.
  # @param table_id The unique identifier (dbid) of the table.
  # @param app_id The unique identifier of an app
  # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
  # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
  # @return [Hash<String, Object>]
  describe 'delete_table test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_app_tables
  # Get tables for an app
  # Gets a list of all the tables that exist in a specific application. The properties for each table are the same as what is returned in Get table.
  # @param app_id The unique identifier of an app
  # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
  # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
  # @return [Array<InlineResponse200>]
  describe 'get_app_tables test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_relationships
  # Get all relationships
  # Get a list of all relationships, and their definitions, for a specific table. Details are provided for both the parent and child sides of relationships within a given application. Limited details are returned for cross-application relationships.
  # @param table_id The unique identifier (dbid) of the table.
  # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
  # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
  # @return [Hash<String, Object>]
  describe 'get_relationships test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_table
  # Get a table
  # Gets the properties of an individual table that is part of an application.
  # @param table_id The unique identifier (dbid) of the table.
  # @param app_id The unique identifier of an app
  # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
  # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
  # @return [Hash<String, Object>]
  describe 'get_table test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_relationship
  # Update a relationship
  # Use this endpoint to add lookup fields and summary fields to an existing relationship. Updating a relationship will not delete existing lookup/summary fields.
  # @param table_id The unique identifier (dbid) of the table. This will be the child table.
  # @param relationship_id The relationship id. This is the field id of the reference field on the child table.
  # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
  # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
  # @option opts [Generated6] :generated 
  # @return [Hash<String, Object>]
  describe 'update_relationship test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_table
  # Update a table
  # Updates the main properties of a specific table. Any properties of the table that you do not specify in the request body will remain unchanged.
  # @param table_id The unique identifier (dbid) of the table.
  # @param app_id The unique identifier of an app
  # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
  # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
  # @option opts [Generated4] :generated 
  # @return [Hash<String, Object>]
  describe 'update_table test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
