=begin
#Quick Base API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'uri'

module QuickBase
  class RecordsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete record(s)
    # Deletes record(s) in a table based on a query. Alternatively, all records in the table can be deleted.
    # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
    # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
    # @option opts [Generated11] :generated 
    # @return [Hash<String, Object>]
    def delete_records(qb_realm_hostname, authorization, opts = {})
      data, _status_code, _headers = delete_records_with_http_info(qb_realm_hostname, authorization, opts)
      data
    end

    # Delete record(s)
    # Deletes record(s) in a table based on a query. Alternatively, all records in the table can be deleted.
    # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
    # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
    # @option opts [Generated11] :generated 
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def delete_records_with_http_info(qb_realm_hostname, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecordsApi.delete_records ...'
      end
      # verify the required parameter 'qb_realm_hostname' is set
      if @api_client.config.client_side_validation && qb_realm_hostname.nil?
        fail ArgumentError, "Missing the required parameter 'qb_realm_hostname' when calling RecordsApi.delete_records"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling RecordsApi.delete_records"
      end
      # resource path
      local_var_path = '/records'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'QB-Realm-Hostname'] = qb_realm_hostname
      header_params[:'Authorization'] = authorization
      header_params[:'User-Agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'generated'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordsApi#delete_records\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query for data
    # Pass in a query in the [Quick Base query language](https://help.quickbase.com/api-guide/componentsquery.html). Returns record data with intelligent pagination based on the approximate size of each record. The metadata object will include the necessary information to iterate over the response and gather more data.
    # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
    # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
    # @option opts [Generated12] :generated 
    # @return [Hash<String, Object>]
    def run_query(qb_realm_hostname, authorization, opts = {})
      data, _status_code, _headers = run_query_with_http_info(qb_realm_hostname, authorization, opts)
      data
    end

    # Query for data
    # Pass in a query in the [Quick Base query language](https://help.quickbase.com/api-guide/componentsquery.html). Returns record data with intelligent pagination based on the approximate size of each record. The metadata object will include the necessary information to iterate over the response and gather more data.
    # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
    # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
    # @option opts [Generated12] :generated 
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def run_query_with_http_info(qb_realm_hostname, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecordsApi.run_query ...'
      end
      # verify the required parameter 'qb_realm_hostname' is set
      if @api_client.config.client_side_validation && qb_realm_hostname.nil?
        fail ArgumentError, "Missing the required parameter 'qb_realm_hostname' when calling RecordsApi.run_query"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling RecordsApi.run_query"
      end
      # resource path
      local_var_path = '/records/query'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'QB-Realm-Hostname'] = qb_realm_hostname
      header_params[:'Authorization'] = authorization
      header_params[:'User-Agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'generated'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordsApi#run_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Insert/Update record(s)
    # Insert and/or update record(s) in a table. In this single API call, inserts and updates can be submitted. Update can use the key field on the table, or any other supported unique field. Refer to the [Field types page](../fieldInfo) for more information about how each field type should be formatted. This operation allows for incremental processing of successful records, even when some of the records fail.   **Note:** This endpoint supports a maximum payload size of 10MB.
    # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
    # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
    # @option opts [Generated10] :generated 
    # @return [Hash<String, Object>]
    def upsert(qb_realm_hostname, authorization, opts = {})
      data, _status_code, _headers = upsert_with_http_info(qb_realm_hostname, authorization, opts)
      data
    end

    # Insert/Update record(s)
    # Insert and/or update record(s) in a table. In this single API call, inserts and updates can be submitted. Update can use the key field on the table, or any other supported unique field. Refer to the [Field types page](../fieldInfo) for more information about how each field type should be formatted. This operation allows for incremental processing of successful records, even when some of the records fail.   **Note:** This endpoint supports a maximum payload size of 10MB.
    # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
    # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
    # @option opts [Generated10] :generated 
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def upsert_with_http_info(qb_realm_hostname, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecordsApi.upsert ...'
      end
      # verify the required parameter 'qb_realm_hostname' is set
      if @api_client.config.client_side_validation && qb_realm_hostname.nil?
        fail ArgumentError, "Missing the required parameter 'qb_realm_hostname' when calling RecordsApi.upsert"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling RecordsApi.upsert"
      end
      # resource path
      local_var_path = '/records'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'QB-Realm-Hostname'] = qb_realm_hostname
      header_params[:'Authorization'] = authorization
      header_params[:'User-Agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'generated'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordsApi#upsert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
