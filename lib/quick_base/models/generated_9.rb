=begin
#Quick Base API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'date'

module QuickBase
  # The example below shows all the properties that can be changed with this request. Additional properties that you can see with the corresponding GET request cannot be set through this API.
  class Generated9
    # Indicates if the field is being tracked as part of Quick Base Audit Logs. You can only set this property to \"true\" if the app has audit logs enabled. See Enable data change logs under [Quick Base Audit Logs](https://help.quickbase.com/user-assistance/audit_logs.html).
    attr_accessor :audited

    # The configured help text shown to users within the product.
    attr_accessor :field_help

    # Indicates if the field is configured to display in bold in the product.
    attr_accessor :bold

    # Indicates if the field is required (i.e. if every record must have a non-null value in this field). If you attempt to change a field from not-required to required, and the table currently contains records that have null values in that field, you will get an error indicating that there are null values of the field. In this case you need to find and update those records with null values of the field before changing the field to required.
    attr_accessor :required

    attr_accessor :properties

    # Indicates if the field is marked as a default in reports.
    attr_accessor :appears_by_default

    # Indicates if every record in the table must contain a unique value of this field. If you attempt to change a field from not-unique to unique, and the table currently contains records with the same value of this field, you will get an error. In this case you need to find and update those records with duplicate values of the field before changing the field to unique.
    attr_accessor :unique

    # Field Permissions for different roles.
    attr_accessor :permissions

    # Whether the field you are adding should appear on forms.
    attr_accessor :add_to_forms

    # The label (name) of the field.
    attr_accessor :label

    # Indicates if the field is marked as searchable.
    attr_accessor :find_enabled

    # Indicates if the field is configured to not wrap when displayed in the product.
    attr_accessor :no_wrap

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'audited' => :'audited',
        :'field_help' => :'fieldHelp',
        :'bold' => :'bold',
        :'required' => :'required',
        :'properties' => :'properties',
        :'appears_by_default' => :'appearsByDefault',
        :'unique' => :'unique',
        :'permissions' => :'permissions',
        :'add_to_forms' => :'addToForms',
        :'label' => :'label',
        :'find_enabled' => :'findEnabled',
        :'no_wrap' => :'noWrap'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'audited' => :'BOOLEAN',
        :'field_help' => :'String',
        :'bold' => :'BOOLEAN',
        :'required' => :'BOOLEAN',
        :'properties' => :'FieldsfieldIdProperties',
        :'appears_by_default' => :'BOOLEAN',
        :'unique' => :'BOOLEAN',
        :'permissions' => :'Array<FieldsPermissions>',
        :'add_to_forms' => :'BOOLEAN',
        :'label' => :'String',
        :'find_enabled' => :'BOOLEAN',
        :'no_wrap' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'audited')
        self.audited = attributes[:'audited']
      end

      if attributes.has_key?(:'fieldHelp')
        self.field_help = attributes[:'fieldHelp']
      end

      if attributes.has_key?(:'bold')
        self.bold = attributes[:'bold']
      end

      if attributes.has_key?(:'required')
        self.required = attributes[:'required']
      end

      if attributes.has_key?(:'properties')
        self.properties = attributes[:'properties']
      end

      if attributes.has_key?(:'appearsByDefault')
        self.appears_by_default = attributes[:'appearsByDefault']
      end

      if attributes.has_key?(:'unique')
        self.unique = attributes[:'unique']
      end

      if attributes.has_key?(:'permissions')
        if (value = attributes[:'permissions']).is_a?(Array)
          self.permissions = value
        end
      end

      if attributes.has_key?(:'addToForms')
        self.add_to_forms = attributes[:'addToForms']
      end

      if attributes.has_key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.has_key?(:'findEnabled')
        self.find_enabled = attributes[:'findEnabled']
      end

      if attributes.has_key?(:'noWrap')
        self.no_wrap = attributes[:'noWrap']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          audited == o.audited &&
          field_help == o.field_help &&
          bold == o.bold &&
          required == o.required &&
          properties == o.properties &&
          appears_by_default == o.appears_by_default &&
          unique == o.unique &&
          permissions == o.permissions &&
          add_to_forms == o.add_to_forms &&
          label == o.label &&
          find_enabled == o.find_enabled &&
          no_wrap == o.no_wrap
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [audited, field_help, bold, required, properties, appears_by_default, unique, permissions, add_to_forms, label, find_enabled, no_wrap].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = QuickBase.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
