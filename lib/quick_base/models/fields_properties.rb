=begin
#Quick Base API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'date'

module QuickBase
  # Specific field properties.
  class FieldsProperties
    # The comments entered on the field properties by an administrator.
    attr_accessor :comments

    # Whether this field totals in reports within the product.
    attr_accessor :does_total

    # Whether the link field will auto save.
    attr_accessor :auto_save

    # Default user id value.
    attr_accessor :default_value_luid

    # The maximum number of versions configured for a file attachment.
    attr_accessor :max_versions

    # The format to display time.
    attr_accessor :format

    # Whether the field should carry its multiple choice fields when copied.
    attr_accessor :carry_choices

    # The maximum number of characters allowed for entry in the Quick Base product for this field.
    attr_accessor :max_length

    # The configured text value that replaces the URL that users see within the product.
    attr_accessor :link_text

    # The id of the parent composite field, when applicable.
    attr_accessor :parent_field_id

    # Indicates whether to display the timezone within the product.
    attr_accessor :display_timezone

    # Indicates if users can add new choices to a selection list.
    attr_accessor :allow_new_choices

    # Indicates if the field value is defaulted today for new records.
    attr_accessor :default_today

    # The units label.
    attr_accessor :units

    # The id of the source field.
    attr_accessor :source_field_id

    # Whether this field averages in reports within the product.
    attr_accessor :does_average

    # The formula of the field as configured in Quick Base.
    attr_accessor :formula

    # The number of decimal places displayed in the product for this field.
    attr_accessor :decimal_places

    # How to display months.
    attr_accessor :display_month

    # Indicates if the user can see other versions, aside from the most recent, of a file attachment within the product.
    attr_accessor :see_versions

    # The number of lines shown in the Quick Base product for this text field.
    attr_accessor :num_lines

    # The user default type.
    attr_accessor :default_kind

    # How the email is displayed.
    attr_accessor :display_email

    # The current symbol used when displaying field values within the product.
    attr_accessor :currency_symbol

    # The id of the target field.
    attr_accessor :target_field_id

    # The configured option for how users display within the product.
    attr_accessor :display_user

    # Whether a blank value is treated the same as 0 in calculations within the product.
    attr_accessor :blank_is_zero

    # Whether an exact match is required for a report link.
    attr_accessor :exact

    # Default email domain.
    attr_accessor :default_domain

    # The default value configured for a field when a new record is added.
    attr_accessor :default_value

    # Don't show the URL protocol when showing the URL.
    attr_accessor :abbreviate

    # The format used for displaying numeric values in the product (decimal, separators, digit group).
    attr_accessor :number_format

    # The field's target table name.
    attr_accessor :target_table_name

    # The link text, if empty, the url will be used as link text.
    attr_accessor :appears_as

    # The field's html input width in the product.
    attr_accessor :width

    # The currency format used when displaying field values within the product.
    attr_accessor :currency_format

    # Indicates whether images will display for file attachments on forms and reports within the product.
    attr_accessor :display_images

    # Indicates whether to display the day of the week within the product.
    attr_accessor :display_day_of_week

    # The number of digits before commas display in the product, when applicable.
    attr_accessor :comma_start

    # An array of entries that exist for a field that offers choices to the user. Note that these choices refer to the valid values of any records added in the future. You are allowed to remove values from the list of choices even if there are existing records with those values in this field. They will be displayed in red when users look at the data in the browser but there is no other effect. While updating a field with this property, the old choices are removed and replaced by the new choices.
    attr_accessor :choices

    # The id of the target table.
    attr_accessor :target_table_id

    # Whether to display time as relative.
    attr_accessor :display_relative

    # An array of the fields that make up a composite field (e.g., address).
    attr_accessor :composite_fields

    # Indicates whether to display the time, in addition to the date.
    attr_accessor :display_time

    # Version modes for files. Keep all versions vs keep last version.
    attr_accessor :version_mode

    # The id of the field that is used to snapshot values from, when applicable.
    attr_accessor :snap_field_id

    # Indicates whether or not to display time in the 24-hour format within the product.
    attr_accessor :hours24

    # Whether to sort alphabetically, default sort is by record ID.
    attr_accessor :sort_alpha

    # Indicates if the listed entries sort as entered vs alphabetically.
    attr_accessor :sort_as_given

    # Whether this field has a phone extension.
    attr_accessor :has_extension

    # Indicates if the URL should open a new window when a user clicks it within the product.
    attr_accessor :use_new_window

    # Whether this field is append only.
    attr_accessor :append_only

    # Indicates if a field that is part of the relationship should be shown as a hyperlink to the parent record within the product.
    attr_accessor :display_as_link

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'comments' => :'comments',
        :'does_total' => :'doesTotal',
        :'auto_save' => :'autoSave',
        :'default_value_luid' => :'defaultValueLuid',
        :'max_versions' => :'maxVersions',
        :'format' => :'format',
        :'carry_choices' => :'carryChoices',
        :'max_length' => :'maxLength',
        :'link_text' => :'linkText',
        :'parent_field_id' => :'parentFieldId',
        :'display_timezone' => :'displayTimezone',
        :'allow_new_choices' => :'allowNewChoices',
        :'default_today' => :'defaultToday',
        :'units' => :'units',
        :'source_field_id' => :'sourceFieldId',
        :'does_average' => :'doesAverage',
        :'formula' => :'formula',
        :'decimal_places' => :'decimalPlaces',
        :'display_month' => :'displayMonth',
        :'see_versions' => :'seeVersions',
        :'num_lines' => :'numLines',
        :'default_kind' => :'defaultKind',
        :'display_email' => :'displayEmail',
        :'currency_symbol' => :'currencySymbol',
        :'target_field_id' => :'targetFieldId',
        :'display_user' => :'displayUser',
        :'blank_is_zero' => :'blankIsZero',
        :'exact' => :'exact',
        :'default_domain' => :'defaultDomain',
        :'default_value' => :'defaultValue',
        :'abbreviate' => :'abbreviate',
        :'number_format' => :'numberFormat',
        :'target_table_name' => :'targetTableName',
        :'appears_as' => :'appearsAs',
        :'width' => :'width',
        :'currency_format' => :'currencyFormat',
        :'display_images' => :'displayImages',
        :'display_day_of_week' => :'displayDayOfWeek',
        :'comma_start' => :'commaStart',
        :'choices' => :'choices',
        :'target_table_id' => :'targetTableId',
        :'display_relative' => :'displayRelative',
        :'composite_fields' => :'compositeFields',
        :'display_time' => :'displayTime',
        :'version_mode' => :'versionMode',
        :'snap_field_id' => :'snapFieldId',
        :'hours24' => :'hours24',
        :'sort_alpha' => :'sortAlpha',
        :'sort_as_given' => :'sortAsGiven',
        :'has_extension' => :'hasExtension',
        :'use_new_window' => :'useNewWindow',
        :'append_only' => :'appendOnly',
        :'display_as_link' => :'displayAsLink'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'comments' => :'String',
        :'does_total' => :'BOOLEAN',
        :'auto_save' => :'BOOLEAN',
        :'default_value_luid' => :'Integer',
        :'max_versions' => :'Integer',
        :'format' => :'Integer',
        :'carry_choices' => :'BOOLEAN',
        :'max_length' => :'Integer',
        :'link_text' => :'String',
        :'parent_field_id' => :'Integer',
        :'display_timezone' => :'BOOLEAN',
        :'allow_new_choices' => :'BOOLEAN',
        :'default_today' => :'BOOLEAN',
        :'units' => :'String',
        :'source_field_id' => :'Integer',
        :'does_average' => :'BOOLEAN',
        :'formula' => :'String',
        :'decimal_places' => :'Integer',
        :'display_month' => :'String',
        :'see_versions' => :'BOOLEAN',
        :'num_lines' => :'Integer',
        :'default_kind' => :'String',
        :'display_email' => :'String',
        :'currency_symbol' => :'String',
        :'target_field_id' => :'Integer',
        :'display_user' => :'String',
        :'blank_is_zero' => :'BOOLEAN',
        :'exact' => :'BOOLEAN',
        :'default_domain' => :'String',
        :'default_value' => :'String',
        :'abbreviate' => :'BOOLEAN',
        :'number_format' => :'Integer',
        :'target_table_name' => :'String',
        :'appears_as' => :'String',
        :'width' => :'Integer',
        :'currency_format' => :'String',
        :'display_images' => :'BOOLEAN',
        :'display_day_of_week' => :'BOOLEAN',
        :'comma_start' => :'Integer',
        :'choices' => :'Array<String>',
        :'target_table_id' => :'String',
        :'display_relative' => :'BOOLEAN',
        :'composite_fields' => :'Array<null>',
        :'display_time' => :'BOOLEAN',
        :'version_mode' => :'Integer',
        :'snap_field_id' => :'Integer',
        :'hours24' => :'BOOLEAN',
        :'sort_alpha' => :'BOOLEAN',
        :'sort_as_given' => :'BOOLEAN',
        :'has_extension' => :'BOOLEAN',
        :'use_new_window' => :'BOOLEAN',
        :'append_only' => :'BOOLEAN',
        :'display_as_link' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'comments')
        self.comments = attributes[:'comments']
      end

      if attributes.has_key?(:'doesTotal')
        self.does_total = attributes[:'doesTotal']
      end

      if attributes.has_key?(:'autoSave')
        self.auto_save = attributes[:'autoSave']
      end

      if attributes.has_key?(:'defaultValueLuid')
        self.default_value_luid = attributes[:'defaultValueLuid']
      end

      if attributes.has_key?(:'maxVersions')
        self.max_versions = attributes[:'maxVersions']
      end

      if attributes.has_key?(:'format')
        self.format = attributes[:'format']
      end

      if attributes.has_key?(:'carryChoices')
        self.carry_choices = attributes[:'carryChoices']
      end

      if attributes.has_key?(:'maxLength')
        self.max_length = attributes[:'maxLength']
      end

      if attributes.has_key?(:'linkText')
        self.link_text = attributes[:'linkText']
      end

      if attributes.has_key?(:'parentFieldId')
        self.parent_field_id = attributes[:'parentFieldId']
      end

      if attributes.has_key?(:'displayTimezone')
        self.display_timezone = attributes[:'displayTimezone']
      end

      if attributes.has_key?(:'allowNewChoices')
        self.allow_new_choices = attributes[:'allowNewChoices']
      end

      if attributes.has_key?(:'defaultToday')
        self.default_today = attributes[:'defaultToday']
      end

      if attributes.has_key?(:'units')
        self.units = attributes[:'units']
      end

      if attributes.has_key?(:'sourceFieldId')
        self.source_field_id = attributes[:'sourceFieldId']
      end

      if attributes.has_key?(:'doesAverage')
        self.does_average = attributes[:'doesAverage']
      end

      if attributes.has_key?(:'formula')
        self.formula = attributes[:'formula']
      end

      if attributes.has_key?(:'decimalPlaces')
        self.decimal_places = attributes[:'decimalPlaces']
      end

      if attributes.has_key?(:'displayMonth')
        self.display_month = attributes[:'displayMonth']
      end

      if attributes.has_key?(:'seeVersions')
        self.see_versions = attributes[:'seeVersions']
      end

      if attributes.has_key?(:'numLines')
        self.num_lines = attributes[:'numLines']
      end

      if attributes.has_key?(:'defaultKind')
        self.default_kind = attributes[:'defaultKind']
      end

      if attributes.has_key?(:'displayEmail')
        self.display_email = attributes[:'displayEmail']
      end

      if attributes.has_key?(:'currencySymbol')
        self.currency_symbol = attributes[:'currencySymbol']
      end

      if attributes.has_key?(:'targetFieldId')
        self.target_field_id = attributes[:'targetFieldId']
      end

      if attributes.has_key?(:'displayUser')
        self.display_user = attributes[:'displayUser']
      end

      if attributes.has_key?(:'blankIsZero')
        self.blank_is_zero = attributes[:'blankIsZero']
      end

      if attributes.has_key?(:'exact')
        self.exact = attributes[:'exact']
      end

      if attributes.has_key?(:'defaultDomain')
        self.default_domain = attributes[:'defaultDomain']
      end

      if attributes.has_key?(:'defaultValue')
        self.default_value = attributes[:'defaultValue']
      end

      if attributes.has_key?(:'abbreviate')
        self.abbreviate = attributes[:'abbreviate']
      end

      if attributes.has_key?(:'numberFormat')
        self.number_format = attributes[:'numberFormat']
      end

      if attributes.has_key?(:'targetTableName')
        self.target_table_name = attributes[:'targetTableName']
      end

      if attributes.has_key?(:'appearsAs')
        self.appears_as = attributes[:'appearsAs']
      end

      if attributes.has_key?(:'width')
        self.width = attributes[:'width']
      end

      if attributes.has_key?(:'currencyFormat')
        self.currency_format = attributes[:'currencyFormat']
      end

      if attributes.has_key?(:'displayImages')
        self.display_images = attributes[:'displayImages']
      end

      if attributes.has_key?(:'displayDayOfWeek')
        self.display_day_of_week = attributes[:'displayDayOfWeek']
      end

      if attributes.has_key?(:'commaStart')
        self.comma_start = attributes[:'commaStart']
      end

      if attributes.has_key?(:'choices')
        if (value = attributes[:'choices']).is_a?(Array)
          self.choices = value
        end
      end

      if attributes.has_key?(:'targetTableId')
        self.target_table_id = attributes[:'targetTableId']
      end

      if attributes.has_key?(:'displayRelative')
        self.display_relative = attributes[:'displayRelative']
      end

      if attributes.has_key?(:'compositeFields')
        if (value = attributes[:'compositeFields']).is_a?(Array)
          self.composite_fields = value
        end
      end

      if attributes.has_key?(:'displayTime')
        self.display_time = attributes[:'displayTime']
      end

      if attributes.has_key?(:'versionMode')
        self.version_mode = attributes[:'versionMode']
      end

      if attributes.has_key?(:'snapFieldId')
        self.snap_field_id = attributes[:'snapFieldId']
      end

      if attributes.has_key?(:'hours24')
        self.hours24 = attributes[:'hours24']
      end

      if attributes.has_key?(:'sortAlpha')
        self.sort_alpha = attributes[:'sortAlpha']
      end

      if attributes.has_key?(:'sortAsGiven')
        self.sort_as_given = attributes[:'sortAsGiven']
      end

      if attributes.has_key?(:'hasExtension')
        self.has_extension = attributes[:'hasExtension']
      end

      if attributes.has_key?(:'useNewWindow')
        self.use_new_window = attributes[:'useNewWindow']
      end

      if attributes.has_key?(:'appendOnly')
        self.append_only = attributes[:'appendOnly']
      end

      if attributes.has_key?(:'displayAsLink')
        self.display_as_link = attributes[:'displayAsLink']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          comments == o.comments &&
          does_total == o.does_total &&
          auto_save == o.auto_save &&
          default_value_luid == o.default_value_luid &&
          max_versions == o.max_versions &&
          format == o.format &&
          carry_choices == o.carry_choices &&
          max_length == o.max_length &&
          link_text == o.link_text &&
          parent_field_id == o.parent_field_id &&
          display_timezone == o.display_timezone &&
          allow_new_choices == o.allow_new_choices &&
          default_today == o.default_today &&
          units == o.units &&
          source_field_id == o.source_field_id &&
          does_average == o.does_average &&
          formula == o.formula &&
          decimal_places == o.decimal_places &&
          display_month == o.display_month &&
          see_versions == o.see_versions &&
          num_lines == o.num_lines &&
          default_kind == o.default_kind &&
          display_email == o.display_email &&
          currency_symbol == o.currency_symbol &&
          target_field_id == o.target_field_id &&
          display_user == o.display_user &&
          blank_is_zero == o.blank_is_zero &&
          exact == o.exact &&
          default_domain == o.default_domain &&
          default_value == o.default_value &&
          abbreviate == o.abbreviate &&
          number_format == o.number_format &&
          target_table_name == o.target_table_name &&
          appears_as == o.appears_as &&
          width == o.width &&
          currency_format == o.currency_format &&
          display_images == o.display_images &&
          display_day_of_week == o.display_day_of_week &&
          comma_start == o.comma_start &&
          choices == o.choices &&
          target_table_id == o.target_table_id &&
          display_relative == o.display_relative &&
          composite_fields == o.composite_fields &&
          display_time == o.display_time &&
          version_mode == o.version_mode &&
          snap_field_id == o.snap_field_id &&
          hours24 == o.hours24 &&
          sort_alpha == o.sort_alpha &&
          sort_as_given == o.sort_as_given &&
          has_extension == o.has_extension &&
          use_new_window == o.use_new_window &&
          append_only == o.append_only &&
          display_as_link == o.display_as_link
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [comments, does_total, auto_save, default_value_luid, max_versions, format, carry_choices, max_length, link_text, parent_field_id, display_timezone, allow_new_choices, default_today, units, source_field_id, does_average, formula, decimal_places, display_month, see_versions, num_lines, default_kind, display_email, currency_symbol, target_field_id, display_user, blank_is_zero, exact, default_domain, default_value, abbreviate, number_format, target_table_name, appears_as, width, currency_format, display_images, display_day_of_week, comma_start, choices, target_table_id, display_relative, composite_fields, display_time, version_mode, snap_field_id, hours24, sort_alpha, sort_as_given, has_extension, use_new_window, append_only, display_as_link].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = QuickBase.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
