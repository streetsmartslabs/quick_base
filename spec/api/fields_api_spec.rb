=begin
#Quick Base API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'spec_helper'
require 'json'

# Unit tests for QuickBase::FieldsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'FieldsApi' do
  before do
    # run before each test
    @instance = QuickBase::FieldsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FieldsApi' do
    it 'should create an instance of FieldsApi' do
      expect(@instance).to be_instance_of(QuickBase::FieldsApi)
    end
  end

  # unit tests for create_field
  # Create a field
  # Creates a field within a table, including the custom permissions of that field.
  # @param table_id The unique identifier of the table.
  # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
  # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
  # @option opts [Generated7] :generated 
  # @return [Hash<String, Object>]
  describe 'create_field test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_fields
  # Delete field(s)
  # Deletes one or many fields in a table, based on field id. This will also permanently delete any data or calculations in that field.
  # @param table_id The unique identifier of the table.
  # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
  # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
  # @option opts [Generated8] :generated 
  # @return [Hash<String, Object>]
  describe 'delete_fields test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_field
  # Get field
  # Gets the properties of an individual field, based on field id.
  # @param field_id The unique identifier (fid) of the field.
  # @param table_id The unique identifier (dbid) of the table.
  # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
  # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :include_field_perms Set to &#39;true&#39; if you&#39;d like to get back the custom permissions for the field(s).
  # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
  # @return [Hash<String, Object>]
  describe 'get_field test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_field_usage
  # Get usage for a field
  # Get a single fields usage statistics. This is a summary of the information that can be found in the usage table of field properties.
  # @param field_id The unique identifier (fid) of the field.
  # @param table_id The unique identifier (dbid) of the table.
  # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
  # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
  # @return [Array<InlineResponse2003>]
  describe 'get_field_usage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_fields
  # Get fields for a table
  # Gets the properties for all fields in a specific table. The properties for each field are the same as in Get field.
  # @param table_id The unique identifier (dbid) of the table.
  # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
  # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :include_field_perms Set to &#39;true&#39; if you&#39;d like to get back the custom permissions for the field(s).
  # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
  # @return [Array<InlineResponse2002>]
  describe 'get_fields test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_fields_usage
  # Get usage for all fields
  # Get all the field usage statistics for a table. This is a summary of the information that can be found in the usage table of field properties.
  # @param table_id The unique identifier (dbid) of the table.
  # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
  # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :skip The number of fields to skip from the list.
  # @option opts [Integer] :top The maximum number of fields to return.
  # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
  # @return [Array<InlineResponse2003>]
  describe 'get_fields_usage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_field
  # Update a field
  # Updates the properties and custom permissions of a field. The attempt to update certain properties might cause existing data to no longer obey the fieldâ€™s new properties and may be rejected. See the descriptions of required, unique, and choices, below, for specific situations. Any properties of the field that you do not specify in the request body will remain unchanged.
  # @param field_id The unique identifier (fid) of the field.
  # @param table_id The unique identifier of the table.
  # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
  # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_agent This is entered by the person or utility invoking the API. You might custom create this or use the default one of your toolkit. Being descriptive here may offer more identification and troubleshooting capabilities.
  # @option opts [Generated9] :generated 
  # @return [Hash<String, Object>]
  describe 'update_field test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
