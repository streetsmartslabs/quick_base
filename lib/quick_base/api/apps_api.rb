=begin
#Quick Base API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'uri'

module QuickBase
  class AppsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an app
    # Creates an application in an account. You must have application creation rights in the respective account. Main properties and application variables can be set with this API.
    # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
    # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_agent Information is entered by the person or utility invoking the API. Choose between the default in your toolkit or custom create it. Being as descriptive as possible will help in identification and troubleshooting.
    # @option opts [Generated] :generated 
    # @return [Hash<String, Object>]
    def create_app(qb_realm_hostname, authorization, opts = {})
      data, _status_code, _headers = create_app_with_http_info(qb_realm_hostname, authorization, opts)
      data
    end

    # Create an app
    # Creates an application in an account. You must have application creation rights in the respective account. Main properties and application variables can be set with this API.
    # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
    # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_agent Information is entered by the person or utility invoking the API. Choose between the default in your toolkit or custom create it. Being as descriptive as possible will help in identification and troubleshooting.
    # @option opts [Generated] :generated 
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def create_app_with_http_info(qb_realm_hostname, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.create_app ...'
      end
      # verify the required parameter 'qb_realm_hostname' is set
      if @api_client.config.client_side_validation && qb_realm_hostname.nil?
        fail ArgumentError, "Missing the required parameter 'qb_realm_hostname' when calling AppsApi.create_app"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AppsApi.create_app"
      end
      # resource path
      local_var_path = '/apps'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'QB-Realm-Hostname'] = qb_realm_hostname
      header_params[:'Authorization'] = authorization
      header_params[:'User-Agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'generated'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#create_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an app
    # Deletes an entire application, including all of the tables and data.
    # @param app_id The unique identifier of an app
    # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
    # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_agent Information is entered by the person or utility invoking the API. Choose between the default in your toolkit or custom create it. Being as descriptive as possible will help in identification and troubleshooting.
    # @option opts [Generated2] :generated 
    # @return [Hash<String, Object>]
    def delete_app(app_id, qb_realm_hostname, authorization, opts = {})
      data, _status_code, _headers = delete_app_with_http_info(app_id, qb_realm_hostname, authorization, opts)
      data
    end

    # Delete an app
    # Deletes an entire application, including all of the tables and data.
    # @param app_id The unique identifier of an app
    # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
    # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_agent Information is entered by the person or utility invoking the API. Choose between the default in your toolkit or custom create it. Being as descriptive as possible will help in identification and troubleshooting.
    # @option opts [Generated2] :generated 
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def delete_app_with_http_info(app_id, qb_realm_hostname, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.delete_app ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling AppsApi.delete_app"
      end
      # verify the required parameter 'qb_realm_hostname' is set
      if @api_client.config.client_side_validation && qb_realm_hostname.nil?
        fail ArgumentError, "Missing the required parameter 'qb_realm_hostname' when calling AppsApi.delete_app"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AppsApi.delete_app"
      end
      # resource path
      local_var_path = '/apps/{appId}'.sub('{' + 'appId' + '}', app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'QB-Realm-Hostname'] = qb_realm_hostname
      header_params[:'Authorization'] = authorization
      header_params[:'User-Agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'generated'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#delete_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an app
    # Returns the main properties of an application, including application variables.
    # @param app_id The unique identifier of an app
    # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
    # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_agent Information is entered by the person or utility invoking the API. Choose between the default in your toolkit or custom create it. Being as descriptive as possible will help in identification and troubleshooting.
    # @return [Hash<String, Object>]
    def get_app(app_id, qb_realm_hostname, authorization, opts = {})
      data, _status_code, _headers = get_app_with_http_info(app_id, qb_realm_hostname, authorization, opts)
      data
    end

    # Get an app
    # Returns the main properties of an application, including application variables.
    # @param app_id The unique identifier of an app
    # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
    # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_agent Information is entered by the person or utility invoking the API. Choose between the default in your toolkit or custom create it. Being as descriptive as possible will help in identification and troubleshooting.
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_app_with_http_info(app_id, qb_realm_hostname, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.get_app ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling AppsApi.get_app"
      end
      # verify the required parameter 'qb_realm_hostname' is set
      if @api_client.config.client_side_validation && qb_realm_hostname.nil?
        fail ArgumentError, "Missing the required parameter 'qb_realm_hostname' when calling AppsApi.get_app"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AppsApi.get_app"
      end
      # resource path
      local_var_path = '/apps/{appId}'.sub('{' + 'appId' + '}', app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'QB-Realm-Hostname'] = qb_realm_hostname
      header_params[:'Authorization'] = authorization
      header_params[:'User-Agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#get_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an app
    # Updates the main properties and/or application variables for a specific application. Any properties of the app that you do not specify in the request body will remain unchanged.
    # @param app_id The unique identifier of an app
    # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
    # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_agent Information is entered by the person or utility invoking the API. Choose between the default in your toolkit or custom create it. Being as descriptive as possible will help in identification and troubleshooting.
    # @option opts [Generated1] :generated 
    # @return [Hash<String, Object>]
    def update_app(app_id, qb_realm_hostname, authorization, opts = {})
      data, _status_code, _headers = update_app_with_http_info(app_id, qb_realm_hostname, authorization, opts)
      data
    end

    # Update an app
    # Updates the main properties and/or application variables for a specific application. Any properties of the app that you do not specify in the request body will remain unchanged.
    # @param app_id The unique identifier of an app
    # @param qb_realm_hostname Your Quick Base domain, for example demo.quickbase.com
    # @param authorization The Quick Base authentication scheme you are using to authenticate the request, as described on the [authorization page](../auth).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_agent Information is entered by the person or utility invoking the API. Choose between the default in your toolkit or custom create it. Being as descriptive as possible will help in identification and troubleshooting.
    # @option opts [Generated1] :generated 
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def update_app_with_http_info(app_id, qb_realm_hostname, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.update_app ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling AppsApi.update_app"
      end
      # verify the required parameter 'qb_realm_hostname' is set
      if @api_client.config.client_side_validation && qb_realm_hostname.nil?
        fail ArgumentError, "Missing the required parameter 'qb_realm_hostname' when calling AppsApi.update_app"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AppsApi.update_app"
      end
      # resource path
      local_var_path = '/apps/{appId}'.sub('{' + 'appId' + '}', app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'QB-Realm-Hostname'] = qb_realm_hostname
      header_params[:'Authorization'] = authorization
      header_params[:'User-Agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'generated'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#update_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
